<?xml version="1.0" encoding="UTF-8"?>

<project default="usage" xmlns:ivy="antlib:org.apache.ivy.ant">

    <target name="properties">

        <property file="project.properties" />

        <path id="thirdparty.jars">
            <pathelement location="lib/commons-lang3-${commons-lang3.version}.jar" />
            <pathelement location="lib/commons-cli-${commons-cli.version}.jar" />
            <pathelement location="lib/log4j-api-${log4j.version}.jar" />
            <pathelement location="lib/log4j-core-${log4j.version}.jar" />
            <pathelement location="lib/slf4j-api-${slf4j.version}.jar" />
            <pathelement location="lib/log4j-slf4j2-impl-${log4j.version}.jar" />
            <pathelement location="lib/lettuce-core-${lettuce.version}.jar" />
            <pathelement location="lib/reactive-streams-${reactive-streams.version}.jar" />
            <pathelement location="lib/reactor-core-${reactor-core.version}.jar" />
            <pathelement location="lib/netty-transport-${netty.version}.jar" />
            <pathelement location="lib/netty-common-${netty.version}.jar" />
            <pathelement location="lib/netty-handler-${netty.version}.jar" />
            <pathelement location="lib/netty-resolver-${netty.version}.jar" />
            <pathelement location="lib/netty-buffer-${netty.version}.jar" />
            <pathelement location="lib/netty-codec-${netty.version}.jar" />
            <pathelement location="lib/embedded-redis-${embedded-redis.version}.jar" />
            <pathelement location="lib/guava-${guava.version}.jar" />
        </path>

        <path id="junit.jars">
            <pathelement location="lib/junit-${junit.version}.jar" />
            <pathelement location="lib/hamcrest-${hamcrest.version}.jar" />
        </path>

    </target>

    <target name="setup.ivy" depends="properties" >

        <!-- ivy (dependency manager) -->
        <!-- to (re)install ivy: cd ivy; ./install-ivy.sh -->
        <path id="ivy.lib.path">
            <fileset dir="tools/ivy" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

    </target>

    <target name="setup.groovy" depends="fetchlibs, properties">
        <path id="groovy.lib.path">
            <fileset dir="lib" includes="groovy-${groovy.version}.jar"/>
            <fileset dir="lib" includes="groovy-ant-${groovy.version}.jar"/>
        </path>
        <taskdef name="groovy"
                 classname="org.codehaus.groovy.ant.Groovy"
                 classpathref="groovy.lib.path"
        />
    </target>

    <target name="fetchlibs" depends="tools.install, setup.ivy" unless="fetchlibs.done">

        <ivy:retrieve log="quiet"/>
        <!-- ivy throws some weird exception when called twice in a run -->

        <property name="fetchlibs.done" value="true"/>

    </target>

    <target name="compile" depends="fetchlibs">
        <mkdir dir="target/classes" />
        <javac
                srcdir="src/main/java"
                destdir="target/classes"
                debug="true"
        >
            <src path="src/main/java" />
            <classpath refid="thirdparty.jars"/>
        </javac>
        <mkdir dir="target/test-classes" />
        <javac
                srcdir="src/test/java"
                destdir="target/test-classes"
                debug="true"
            >
            <classpath>
                <pathelement path="target/classes"/>
            </classpath>
            <classpath refid="thirdparty.jars"/>
            <classpath refid="junit.jars"/>
        </javac>
        <mkdir dir="target/integration-classes" />
        <javac
                srcdir="src/integration/java"
                destdir="target/integration-classes"
                debug="true"
        >
            <classpath>
                <pathelement path="target/classes"/>
            </classpath>
            <classpath refid="thirdparty.jars"/>
            <classpath refid="junit.jars"/>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <tstamp>
            <format property="touch.time" pattern="dd.MM.yyyy HH:mm:ss"/>
        </tstamp>

        <jar
                jarfile="target/jglu-${jglu.version}.jar"
                basedir="target/classes"
        >
            <manifest>
                <attribute name="Create-Timestamp" value="${touch.time}"/>
                <attribute name="Main-Class" value="com.infodesire.jvmcom.Main"/>
                <attribute name="Class-Path"
                           value="commons-cli-${commons-cli.version}.jar commons-lang3-${commons-lang3.version}.jar slf4j-api-${slf4j.version}.jar slf4j-simple-${slf4j.version}.jar"/>
            </manifest>
        </jar>
    </target>

    <target name="cli" depends="compile">
        <property name="commandline" value="-i" />
        <java
            classpath="target/classes"
            classname="com.infodesire.jglu.Main"
            fork="true"
            >
            <arg line="${commandline}" />
            <classpath refid="thirdparty.jars"/>
        </java>
    </target>

    <target name="tools.install" depends="properties">

        <mkdir dir="tools/ivy" />
        <get
                src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
                dest="tools/ivy"
                usetimestamp="true"
                skipexisting="true"
        />

    </target>

    <target name="test" depends="test.run">
        <groovy>
            import java.awt.Desktop;
            if (Desktop.isDesktopSupported()) {
            try {
            Desktop desktop = Desktop.getDesktop();
            File myFile = new File("target/test-report/report/junit-noframes.html");
            desktop.open(myFile);
            }
            catch (IOException ex) {
            ex.printStackTrace();
            }
            }
        </groovy>
        <fail if="failures" ></fail>
    </target>

    <target name="test-quietly" depends="test.run">
        <fail if="failures" ></fail>
    </target>


    <target name="integration" depends="test-quietly, integration.run">
        <groovy>
            import java.awt.Desktop;
            if (Desktop.isDesktopSupported()) {
            try {
            Desktop desktop = Desktop.getDesktop();
            File myFile = new File("target/integration-report/report/junit-noframes.html");
            desktop.open(myFile);
            }
            catch (IOException ex) {
            ex.printStackTrace();
            }
            }
        </groovy>
        <fail if="failures" />
    </target>


    <target name="test.run" depends="compile, setup.groovy">

        <!-- default fallback: test all -->
        <property name="test.include" value="**/*Test.class" />

        <mkdir dir="target/test-generated-files" />
        <junit
                fork="true"
                printsummary="on"
                showoutput="true"
        >
            <!-- fork:true is necessary, because some tests use ant themselves -->

            <classpath>
                <fileset dir="lib" />
                <pathelement location="target/classes" />
                <pathelement location="target/test-classes"/>
            </classpath>

            <batchtest
                    failureproperty="failures"
                    errorproperty="failures"
                    todir="target/test-generated-files"
            >

                <fileset dir="target/test-classes" >
                    <include name="${test.include}" />
                </fileset>

            </batchtest>

            <formatter type="xml" />

        </junit>

        <mkdir dir="target/test-report" />
        <junitreport todir="target/test-report">
            <fileset dir="target/test-generated-files">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="target/test-report/report"/>
        </junitreport>

    </target>

    <target name="integration.run" depends="compile">

        <mkdir dir="target/integration-generated-files"/>
        <junit
                fork="true"
                printsummary="on"
                timeout="600000"
                showoutput="true"
        >
            <!-- fork:true is necessary, because some tests use ant themselves -->

            <classpath>
                <fileset dir="lib"/>
                <pathelement location="target/classes"/>
                <pathelement location="target/integration-classes"/>
            </classpath>

            <batchtest
                    failureproperty="failures"
                    errorproperty="failures"
                    todir="target/integration-generated-files"
            >

                <fileset dir="target/integration-classes">
                    <include name="**/*Test.class"/>
                </fileset>

            </batchtest>

            <formatter type="xml"/>

        </junit>

        <mkdir dir="target/integration-report"/>
        <junitreport todir="target/integration-report">
            <fileset dir="target/integration-generated-files">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="target/integration-report/report"/>
        </junitreport>

    </target>


    <target name="clean">
        <delete dir="target" />
    </target>

    <target name="clean.all" depends="clean">
        <delete dir="lib" />
        <delete dir="tools" />
    </target>

    <target name="help" depends="usage" />

    <target name="src.jar" depends="properties" >
        <jar destfile="target/jglu-${jglu.version}-sources.jar">
            <fileset dir="src"></fileset>
        </jar>
    </target>


    <target
            name="publish"
            depends="jar, src.jar"
            description="publish to team repo"
    >

        <property name="publish.team.path.jars" value="maven/com.infodesire.jglu/jars/" />
        <property name="publish.team.path.sources" value="maven/com.infodesire.jglu/sources/" />

        <property file="${user.home}/.bsm/teamserver.properties" />

        <property name="publish.team.server" value="SERVERNAME" />
        <property name="publish.team.port" value="22" />
        <property name="publish.team.user" value="USERNAME" />
        <property name="publish.team.keyfile" value="~/.ssh/id_rsa" />

        <echo>.
            What to check, if upload fails:
            - is the server ${publish.team.server} reachable from this machine?
            - is the public ssh key of the current user deployed on the team server .ssh/authorized_keys?
            - is the public ssh key of the current user available in the file ${publish.team.keyfile}

            To provide different settings for the team server connection, create of modify these in the
            file: ~/.bsm/teamserver.properties:

            --------------------------------------------------------------------
            publish.team.server=SERVERNAME
            publish.team.port=22
            publish.team.user=USERNAME
            publish.team.path.jars=maven/com.infodesire.jvmcom/jars/
            publish.team.path.sources=maven/com.infodesire.jvmcom/sources/
            --------------------------------------------------------------------
        </echo>

        <!-- copy binary -->
        <echo>Uploading target/jglu-${jglu.version}.jar to ${publish.team.user}@${publish.team.server}:${publish.team.path.jars}</echo>
        <scp
                file="target/jglu-${jglu.version}.jar"
                todir="${publish.team.user}@${publish.team.server}:${publish.team.path.jars}"
                keyfile="${publish.team.keyfile}"
                verbose="false"
                trust="true"
                failonerror="true"
                port="${publish.team.port}"
        />

        <!-- copy sources -->
        <echo>Uploading target/jglu-${jglu.version}-sources.jar to ${publish.team.user}@${publish.team.server}:${publish.team.path.sources}</echo>
        <scp
                file="target/jglu-${jglu.version}-sources.jar"
                todir="${publish.team.user}@${publish.team.server}:${publish.team.path.sources}"
                keyfile="${publish.team.keyfile}"
                verbose="false"
                trust="true"
                failonerror="true"
                port="${publish.team.port}"
        />

    </target>

    <target name="usage">
        <echo>

jglu - The glue between JVMs

ant tools.install ............. Install tools: ivy
ant clean ..................... Delete generated files
ant clean.all ................. Delete all generated or downloaded files
ant jar ....................... Build project jar file
ant publish ................... Publish artifacts to team repo
ant test ...................... Run unit tests
ant integration ............... Run integration tests (needs a redis)
ant cli ....................... Run interactive redis client

        </echo>
    </target>

</project>